{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BactoVision","text":""},{"location":"#a-jupyter-widget-for-annotating-and-visualizing-bacterial-growth-data","title":"A Jupyter widget for annotating and visualizing bacterial growth data","text":"<p>BactoVision provides an interactive widget for Jupyter notebook designed for fast semi-automated annotation of bacterial growth images. It combines intuitive manual drawing tools with automatic detection algorithms to make the annotation process efficient and accurate.</p> <p>BactoVision is used in the paper:</p> <p>Tyrosine auxotrophy shapes Staphylococcus aureus nasal colonization and interactions with commensal communities L. Camus et al. 2025 (submitted)</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Jupyter integration - Annotate data directly in Jupyter notebook to enable flexiblility and integration with other methods</li> <li>Interactive annotation - Combine automatic and manual annotation methods</li> <li>Grid system - Analyze data in a structured grid format</li> <li>Image enhancement - Apply CLAHE and other image processing techniques</li> <li>Quantitative analysis - Extract metrics on bacterial growth</li> <li>Intuitive interface - Simple and user-friendly design</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from bactovision.widget import BactoWidget\n\n# Create a widget with an image\nwidget = BactoWidget('path/to/image.png')\n\n# Display the widget\nwidget\n</code></pre> <p>To get the mask and the metrics after the annotation is completed, run:</p> <pre><code>annotation_mask = widget.get_annotation_mask()\nmetrics = widget.get_metrics()\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>If you use BactoVision in your research, please cite:</p> <pre><code>Camus L. et al. (2025). Tyrosine auxotrophy shapes Staphylococcus aureus nasal colonization\nand interactions with commensal communities. [Journal pending].\n</code></pre>"},{"location":"contributing/","title":"Contributing to BactoVision","text":"<p>Thank you for your interest in contributing to BactoVision! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork to your local machine    <pre><code>git clone https://github.com/mlcolab/bactovision.git\ncd bactovision\n</code></pre></li> <li>Set up a virtual environment (optional but recommended)    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></li> <li>Install in development mode    <pre><code>pip install -e .\n</code></pre></li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow PEP 8 style guidelines for Python code. Please ensure your code adheres to these standards.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Before submitting a pull request, please run the test suite to ensure your changes don't break existing functionality.</p> <pre><code># TODO: Add test commands once testing framework is set up\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>BactoVision uses MkDocs with the Material theme for documentation.</p>"},{"location":"contributing/#setting-up-local-documentation","title":"Setting Up Local Documentation","text":"<p>To work on documentation locally:</p> <ol> <li> <p>Install MkDocs and the Material theme    <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> </li> <li> <p>Serve the documentation locally    <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Open your browser to <code>http://127.0.0.1:8000/</code> to see the documentation</p> </li> </ol>"},{"location":"contributing/#documentation-structure","title":"Documentation Structure","text":"<p>Documentation is organized in the <code>docs/</code> directory:</p> <ul> <li><code>index.md</code> - Home page</li> <li><code>installation.md</code> - Installation instructions</li> <li><code>user-guide/</code> - User guide content</li> <li><code>api/</code> - API reference </li> <li><code>examples.md</code> - Usage examples</li> </ul>"},{"location":"contributing/#deploying-documentation-to-github-pages","title":"Deploying Documentation to GitHub Pages","text":"<p>Documentation is automatically deployed to GitHub Pages via GitHub Actions when changes are pushed to the main branch.</p> <p>To set up GitHub Pages for your fork:</p> <ol> <li>Go to your GitHub repository</li> <li>Navigate to Settings &gt; Pages</li> <li>Under \"Source\", select \"GitHub Actions\"</li> <li>The action will build and deploy the documentation when you push to the main branch</li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a new branch for your feature or bugfix</li> <li>Make your changes on the branch</li> <li>Add or update tests as necessary</li> <li>Update documentation if needed</li> <li>Push your branch to GitHub</li> <li>Submit a pull request against the main repository</li> <li>Respond to feedback and make requested changes</li> <li>Once approved, your PR will be merged</li> </ol>"},{"location":"contributing/#releasing","title":"Releasing","text":"<p>Releases are managed by the core maintainers. If you think a new release is needed, please open an issue.</p>"},{"location":"contributing/#questions-or-issues","title":"Questions or Issues?","text":"<p>If you have questions or encounter issues, please open an issue on GitHub. </p>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of using BactoVision for different bacterial growth analysis scenarios.</p>"},{"location":"examples/#basic-usage-example","title":"Basic Usage Example","text":"<p>Here's a simple example of loading an image and using the BactoVision widget:</p> <pre><code>from bactovision.widget import BactoWidget\nimport matplotlib.pyplot as plt\n\n# Create a widget with an image\nwidget = BactoWidget('path/to/your/bacteria_image.png')\n\n# Display the widget in a Jupyter notebook\nwidget\n\n# After annotating using the widget, you can extract metrics\nmetrics = widget.get_metrics()\n\n# Visualize the metrics\nplt.figure(figsize=(10, 6))\nplt.imshow(metrics['integral_opacity'])\nplt.colorbar()\nplt.title('Integral Opacity')\nplt.show()\n</code></pre>"},{"location":"examples/#auto-annotation-example","title":"Auto-Annotation Example","text":"<p>This example demonstrates how to use the automatic annotation feature:</p> <pre><code>from bactovision.widget import BactoWidget\n\n# Create the widget\nwidget = BactoWidget('path/to/bacterial_colonies.png')\n\n# Configure auto-annotation parameters\nwidget.threshold_slider.value = 1.2  # Adjust brightness threshold\nwidget.small_object_size.value = 0.8  # Set minimum object size\n\n# Apply automatic annotation\nwidget.apply_auto_annotation()\n\n# Show the widget for further manual refinement if needed\nwidget\n</code></pre>"},{"location":"examples/#image-preprocessing-example","title":"Image Preprocessing Example","text":"<p>This example shows how to enhance the image before annotation:</p> <pre><code>from bactovision.widget import BactoWidget\n\n# Create the widget\nwidget = BactoWidget('path/to/low_contrast_image.png')\n\n# Apply CLAHE enhancement\nwidget.clahe_btn.value = True\nwidget.clahe_limit_slider.value = 200\n\n# Apply background subtraction\nwidget.subtract_background_btn.value = True\n\n# Change the colormap\nwidget.cmap_down.value = 'viridis'\n\n# Display the enhanced image\nwidget\n</code></pre>"},{"location":"examples/#analysis-with-custom-grid-example","title":"Analysis with Custom Grid Example","text":"<p>This example demonstrates how to customize the grid and analyze grid-specific data:</p> <pre><code>from bactovision.widget import BactoWidget\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create the widget\nwidget = BactoWidget('path/to/experiment_image.png')\n\n# Customize the grid\nwidget.canvas_widget.grid_num_x = 10  # Set horizontal grid size\nwidget.canvas_widget.grid_num_y = 8   # Set vertical grid size\n\n# After annotation, get metrics\nmetrics = widget.get_metrics()\n\n# Create a heatmap visualization\nplt.figure(figsize=(12, 8))\nplt.subplot(2, 2, 1)\nplt.imshow(metrics['integral_opacity'])\nplt.title('Integral Opacity')\nplt.colorbar()\n\nplt.subplot(2, 2, 2)\nplt.imshow(metrics['average_opacity'])\nplt.title('Average Opacity')\nplt.colorbar()\n\nplt.subplot(2, 2, 3)\nplt.imshow(metrics['relative_area'])\nplt.title('Relative Area')\nplt.colorbar()\n\nplt.subplot(2, 2, 4)\nplt.imshow(metrics['num_pixels'])\nplt.title('Pixel Count')\nplt.colorbar()\n\nplt.tight_layout()\nplt.show()\n\n# Export data to CSV\ndata = {\n    'grid_x': [],\n    'grid_y': [],\n    'integral_opacity': [],\n    'average_opacity': [],\n    'relative_area': [],\n    'num_pixels': []\n}\n\nfor y in range(widget.canvas_widget.grid_num_y):\n    for x in range(widget.canvas_widget.grid_num_x):\n        data['grid_x'].append(x)\n        data['grid_y'].append(y)\n        data['integral_opacity'].append(metrics['integral_opacity'][y, x])\n        data['average_opacity'].append(metrics['average_opacity'][y, x])\n        data['relative_area'].append(metrics['relative_area'][y, x])\n        data['num_pixels'].append(metrics['num_pixels'][y, x])\n\ndf = pd.DataFrame(data)\ndf.to_csv('grid_analysis.csv', index=False)\n</code></pre>"},{"location":"examples/#complete-workflow-example","title":"Complete Workflow Example","text":"<p>This example shows a complete workflow from loading an image to analyzing and exporting results:</p> <pre><code>from bactovision.widget import BactoWidget\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\n\n# 1. Load the image and create the widget\nwidget = BactoWidget('path/to/bacterial_growth.png')\n\n# 2. Configure and display the widget (interactive part in Jupyter)\ndisplay(widget)  # In Jupyter notebook\n\n# 3. After manual annotation, or you can use auto-annotation:\nwidget.threshold_slider.value = 1.0\nwidget.small_object_size.value = 0.5\nwidget.apply_auto_annotation()\n\n# 4. Get the annotation mask\nmask = widget.mask\n\n# 5. Save the annotation mask as an image\nImage.fromarray((mask * 255).astype('uint8')).save('annotation_mask.png')\n\n# 6. Extract and analyze metrics\nmetrics = widget.get_metrics()\n\n# 7. Visualize the results\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\nim1 = axes[0, 0].imshow(metrics['integral_opacity'])\naxes[0, 0].set_title('Integral Opacity')\nplt.colorbar(im1, ax=axes[0, 0])\n\nim2 = axes[0, 1].imshow(metrics['average_opacity'])\naxes[0, 1].set_title('Average Opacity')\nplt.colorbar(im2, ax=axes[0, 1])\n\nim3 = axes[1, 0].imshow(metrics['relative_area'])\naxes[1, 0].set_title('Relative Area')\nplt.colorbar(im3, ax=axes[1, 0])\n\nim4 = axes[1, 1].imshow(metrics['num_pixels'])\naxes[1, 1].set_title('Pixel Count')\nplt.colorbar(im4, ax=axes[1, 1])\n\nplt.tight_layout()\nplt.savefig('analysis_results.png', dpi=300)\nplt.show()\n\n# 8. Export data for further analysis\n# Flatten the metrics for export\nflattened_data = {\n    'position': [],\n    'grid_x': [],\n    'grid_y': [],\n    'integral_opacity': [],\n    'average_opacity': [],\n    'relative_area': [],\n    'num_pixels': []\n}\n\ngrid_y, grid_x = metrics['integral_opacity'].shape\nfor y in range(grid_y):\n    for x in range(grid_x):\n        position = y * grid_x + x\n        flattened_data['position'].append(position)\n        flattened_data['grid_x'].append(x)\n        flattened_data['grid_y'].append(y)\n        flattened_data['integral_opacity'].append(metrics['integral_opacity'][y, x])\n        flattened_data['average_opacity'].append(metrics['average_opacity'][y, x])\n        flattened_data['relative_area'].append(metrics['relative_area'][y, x])\n        flattened_data['num_pixels'].append(metrics['num_pixels'][y, x])\n\n# Create and save DataFrame\nresults_df = pd.DataFrame(flattened_data)\nresults_df.to_csv('bacterial_growth_analysis.csv', index=False)\n</code></pre> <p>These examples should help you get started with using BactoVision for your bacterial growth analysis needs. </p>"},{"location":"installation/","title":"Installation Guide","text":"<p>BactoVision is designed to work within Jupyter notebooks and can be installed via pip. The package is compatible with Python 3.7+ and includes all necessary dependencies.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing BactoVision, ensure you have Python 3.7 or higher.</p>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#standard-installation","title":"Standard Installation","text":"<p>The easiest way to install BactoVision is using pip:</p> <pre><code>pip install bactovision\n</code></pre> <p>This will install BactoVision along with all its dependencies.</p>"},{"location":"installation/#installation-from-source","title":"Installation from Source","text":"<p>For the latest development version or to contribute to the project, you can install from source:</p> <pre><code>git clone https://github.com/mlcolab/bactovision.git\ncd bactovision\npip install .\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>BactoVision has the following dependencies, which will be automatically installed with pip:</p> <ul> <li>numpy</li> <li>scipy</li> <li>scikit-image</li> <li>Pillow</li> <li>opencv-python</li> <li>anywidget</li> <li>traitlets</li> <li>matplotlib</li> <li>jupyterlab</li> </ul>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that BactoVision is installed correctly, open a Jupyter notebook and run:</p> <pre><code>from bactovision.widget import BactoWidget\nprint(BactoWidget)\n</code></pre> <p>If the installation was successful, this should print the widget class information without any errors.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#missing-dependencies","title":"Missing Dependencies","text":"<p>If you encounter errors about missing dependencies, try reinstalling with:</p> <pre><code>pip install bactovision --force-reinstall\n</code></pre>"},{"location":"installation/#jupyterlab-extension-issues","title":"JupyterLab Extension Issues","text":"<p>For JupyterLab users, if the widget doesn't display properly, ensure that the widget extension is installed:</p> <pre><code>jupyter labextension list\n</code></pre> <p>The output should include <code>anywidget</code> or similar entries. If not, you may need to run:</p> <pre><code>jupyter labextension install @jupyter-widgets/jupyterlab-manager\n</code></pre>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you experience any issues with installation, please open an issue on our GitHub repository with details about the problem and your environment.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section provides detailed documentation for BactoVision's API. It covers the main classes and functions that you can use programmatically.</p>"},{"location":"api/#package-structure","title":"Package Structure","text":"<p>BactoVision consists of several main components:</p> <ul> <li>BactoWidget (<code>bactovision.widget.BactoWidget</code>) - The main widget class</li> <li>CanvasWidget (<code>bactovision.canvas_widget.CanvasWidget</code>) - The underlying canvas implementation</li> <li>Image Processing (<code>bactovision.image_processing</code>) - Image processing utilities</li> </ul>"},{"location":"api/#core-classes-overview","title":"Core Classes Overview","text":""},{"location":"api/#bactowidget","title":"BactoWidget","text":"<p>The main user-facing class that integrates all components:</p> <pre><code>from bactovision.widget import BactoWidget\n\nwidget = BactoWidget('path/to/image.png')\n</code></pre> <p>This class provides:</p> <ul> <li>Image loading and display</li> <li>UI controls for annotation</li> <li>Grid configuration</li> <li>Metrics extraction</li> </ul>"},{"location":"api/#canvaswidget","title":"CanvasWidget","text":"<p>The lower-level widget that handles the canvas rendering and interactions:</p> <pre><code>from bactovision.canvas_widget import CanvasWidget\n\ncanvas = CanvasWidget()\ncanvas.set_image(image_array)\n</code></pre> <p>This class provides:</p> <ul> <li>Image rendering</li> <li>Drawing capabilities</li> <li>Annotation storage</li> <li>Grid implementation</li> </ul>"},{"location":"api/#image-processing-utilities","title":"Image Processing Utilities","text":"<p>A collection of functions for processing bacterial growth images:</p> <pre><code>from bactovision.image_processing import segment_by_thresholding, normalize_image\n\n# Segment an image\nimage, mask = segment_by_thresholding(image_array, t=1.0, s=1.0)\n\n# Normalize an image to [0,1] range\nnormalized_img = normalize_image(image_array)\n</code></pre>"},{"location":"api/#detailed-api-documentation","title":"Detailed API Documentation","text":"<p>Each component has detailed documentation available:</p> <ul> <li>BactoWidget - Main widget documentation</li> <li>CanvasWidget - Canvas functionality</li> <li>Image Processing - Image processing functions</li> </ul>"},{"location":"api/#usage-examples","title":"Usage Examples","text":"<p>For example code showing how to use these APIs, see the Examples page. </p>"},{"location":"api/bacto-widget/","title":"BactoWidget API","text":"<p>The <code>BactoWidget</code> class is the main user interface component of BactoVision. It integrates all functionality into a single widget that can be used in Jupyter notebooks.</p> <pre><code>from bactovision.widget import BactoWidget\n</code></pre>"},{"location":"api/bacto-widget/#class-constructor","title":"Class Constructor","text":"<pre><code>BactoWidget(img, mask=None)\n</code></pre>"},{"location":"api/bacto-widget/#parameters","title":"Parameters","text":"<ul> <li>img (<code>numpy.ndarray</code> or <code>str</code> or <code>pathlib.Path</code>): The image to be processed. Can be either a NumPy array or a path to an image file.</li> <li>mask (<code>numpy.ndarray</code>, optional): A pre-existing annotation mask. Default is <code>None</code>.</li> </ul>"},{"location":"api/bacto-widget/#returns","title":"Returns","text":"<p>A BactoWidget instance that can be displayed in a Jupyter notebook.</p>"},{"location":"api/bacto-widget/#example","title":"Example","text":"<pre><code># Create from file path\nwidget = BactoWidget('path/to/image.png')\n\n# Create from NumPy array\nimport numpy as np\nfrom PIL import Image\nimage_array = np.array(Image.open('path/to/image.png'))\nwidget = BactoWidget(image_array)\n\n# With a pre-existing mask\nmask = np.zeros_like(image_array[:,:,0])\nmask[100:200, 100:200] = 1  # Example annotation\nwidget = BactoWidget(image_array, mask=mask)\n</code></pre>"},{"location":"api/bacto-widget/#properties","title":"Properties","text":""},{"location":"api/bacto-widget/#ui-controls","title":"UI Controls","text":""},{"location":"api/bacto-widget/#grid-controls","title":"Grid Controls","text":"<ul> <li>change_grid_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to enable/disable grid adjustment mode.</li> <li>hide_grid_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to show/hide the grid.</li> <li>x_grid_size_slider (<code>ipywidgets.IntSlider</code>): Slider to adjust horizontal grid size.</li> <li>y_grid_size_slider (<code>ipywidgets.IntSlider</code>): Slider to adjust vertical grid size.</li> </ul>"},{"location":"api/bacto-widget/#image-enhancement-controls","title":"Image Enhancement Controls","text":"<ul> <li>clahe_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to enable/disable CLAHE enhancement.</li> <li>clahe_limit_slider (<code>ipywidgets.FloatLogSlider</code>): Slider to adjust CLAHE limit.</li> <li>subtract_background_btn (<code>ipywidgets.ToggleButton</code>): Toggle button for background subtraction.</li> <li>cmap_down (<code>ipywidgets.Dropdown</code>): Dropdown to select the colormap.</li> </ul>"},{"location":"api/bacto-widget/#manual-annotation-controls","title":"Manual Annotation Controls","text":"<ul> <li>draw_mode_btns (<code>ipywidgets.ToggleButtons</code>): Buttons to select drawing mode (Off/Add/Erase).</li> <li>brush_size_slider (<code>ipywidgets.FloatSlider</code>): Slider to adjust brush size.</li> </ul>"},{"location":"api/bacto-widget/#automatic-annotation-controls","title":"Automatic Annotation Controls","text":"<ul> <li>annotate_btn (<code>ipywidgets.Button</code>): Button to trigger automatic annotation.</li> <li>hide_annotation_btn (<code>ipywidgets.ToggleButton</code>): Toggle button to hide/show annotations.</li> <li>threshold_slider (<code>ipywidgets.FloatSlider</code>): Slider to adjust brightness threshold.</li> <li>small_object_size (<code>ipywidgets.FloatSlider</code>): Slider to adjust minimum object size.</li> </ul>"},{"location":"api/bacto-widget/#data-access-properties","title":"Data Access Properties","text":"<ul> <li>mask (<code>numpy.ndarray</code>): The current annotation mask as a binary array.</li> <li>canvas_widget (<code>CanvasWidget</code>): The underlying canvas widget instance.</li> <li>original_img (<code>numpy.ndarray</code>): The original input image.</li> </ul>"},{"location":"api/bacto-widget/#methods","title":"Methods","text":""},{"location":"api/bacto-widget/#get_metricsbrightness_modeluminance-inverse","title":"<code>get_metrics(brightness_mode='luminance-inverse')</code>","text":"<p>Calculates metrics for the annotated image based on the current grid.</p>"},{"location":"api/bacto-widget/#parameters_1","title":"Parameters","text":"<ul> <li>brightness_mode (<code>str</code>, optional): Mode for brightness calculation. Default is 'luminance-inverse'.</li> </ul>"},{"location":"api/bacto-widget/#returns_1","title":"Returns","text":"<ul> <li>A dictionary containing the following metrics:</li> <li>intergal_opacity: Total opacity within each grid cell.</li> <li>average_opacity: Average opacity per pixel in each grid cell.</li> <li>relative_area: Proportion of each grid cell that is annotated.</li> <li>num_pixels: Count of annotated pixels in each grid cell.</li> </ul>"},{"location":"api/bacto-widget/#example_1","title":"Example","text":"<pre><code># Get metrics from the widget\nmetrics = widget.get_metrics()\n\n# Access specific metrics\nintegral_opacity = metrics['integral_opacity']\naverage_opacity = metrics['average_opacity']\nrelative_area = metrics['relative_area']\nnum_pixels = metrics['num_pixels']\n</code></pre>"},{"location":"api/bacto-widget/#apply_auto_annotationargs","title":"<code>apply_auto_annotation(*args)</code>","text":"<p>Applies automatic annotation based on the threshold and size settings.</p>"},{"location":"api/bacto-widget/#parameters_2","title":"Parameters","text":"<ul> <li>*args: Unused parameters to maintain compatibility with button callbacks.</li> </ul>"},{"location":"api/bacto-widget/#returns_2","title":"Returns","text":"<ul> <li>None</li> </ul>"},{"location":"api/bacto-widget/#example_2","title":"Example","text":"<pre><code># Configure and run automatic annotation\nwidget.threshold_slider.value = 1.2\nwidget.small_object_size.value = 0.8\nwidget.apply_auto_annotation()\n</code></pre>"},{"location":"api/bacto-widget/#cut_imgimg","title":"<code>cut_img(img)</code>","text":"<p>Cuts the image according to the current grid padding.</p>"},{"location":"api/bacto-widget/#parameters_3","title":"Parameters","text":"<ul> <li>img (<code>numpy.ndarray</code>): The image to cut.</li> </ul>"},{"location":"api/bacto-widget/#returns_3","title":"Returns","text":"<ul> <li>The cut image as a NumPy array.</li> </ul>"},{"location":"api/bacto-widget/#_update_preprocessed_imageargs","title":"<code>_update_preprocessed_image(*args)</code>","text":"<p>Updates the preprocessed image based on current enhancement settings.</p>"},{"location":"api/bacto-widget/#parameters_4","title":"Parameters","text":"<ul> <li>*args: Unused parameters to maintain compatibility with callbacks.</li> </ul>"},{"location":"api/bacto-widget/#returns_4","title":"Returns","text":"<ul> <li>None</li> </ul>"},{"location":"api/bacto-widget/#events-and-callbacks","title":"Events and Callbacks","text":"<p>The BactoWidget sets up numerous event handlers for its controls. The main ones are:</p> <ul> <li>The <code>clahe_btn</code>, <code>clahe_limit_slider</code>, and <code>subtract_background_btn</code> widgets are linked to the <code>_update_preprocessed_image</code> method.</li> <li>The <code>cmap_down</code> dropdown is linked to the <code>_update_image_view</code> method.</li> <li>The <code>draw_mode_btns</code> and <code>brush_size_slider</code> are linked to the Canvas widget.</li> <li>The <code>annotate_btn</code> is linked to the <code>apply_auto_annotation</code> method.</li> <li>The <code>hide_annotation_btn</code> is linked to the <code>_hide_annotation_clicked</code> method.</li> <li>The <code>change_grid_btn</code> is linked to the <code>_change_grid_btn_clicked</code> method.</li> </ul>"},{"location":"api/bacto-widget/#usage-examples","title":"Usage Examples","text":""},{"location":"api/bacto-widget/#basic-usage","title":"Basic Usage","text":"<pre><code>from bactovision.widget import BactoWidget\nimport matplotlib.pyplot as plt\n\n# Create and display the widget\nwidget = BactoWidget('bacteria_image.png')\nwidget  # This displays the widget in the notebook\n\n# After annotation, extract and visualize metrics\nmetrics = widget.get_metrics()\nplt.figure(figsize=(10, 6))\nplt.imshow(metrics['integral_opacity'])\nplt.colorbar()\nplt.title('Integral Opacity')\nplt.show()\n</code></pre>"},{"location":"api/bacto-widget/#programmatic-control","title":"Programmatic Control","text":"<pre><code># Configure grid\nwidget.x_grid_size_slider.value = 10\nwidget.y_grid_size_slider.value = 8\n\n# Enable image enhancements\nwidget.clahe_btn.value = True\nwidget.clahe_limit_slider.value = 200\nwidget.subtract_background_btn.value = True\n\n# Set annotation parameters\nwidget.threshold_slider.value = 1.1\nwidget.small_object_size.value = 0.7\n\n# Run auto-annotation\nwidget.apply_auto_annotation()\n</code></pre> <p>For more examples, see the Examples page. </p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This section provides comprehensive documentation on how to use BactoVision for annotating and analyzing bacterial growth images.</p>"},{"location":"user-guide/#overview","title":"Overview","text":"<p>BactoVision is designed with a focus on usability and flexibility. It provides both automatic and manual annotation capabilities, allowing researchers to quickly process large numbers of images while maintaining the ability to make fine-grained adjustments when needed.</p> <p>The widget interface is divided into several functional areas:</p> <ol> <li>Preprocessing Controls - Tools for enhancing image quality before annotation</li> <li>Grid Controls - Options for configuring the analysis grid</li> <li>Manual Annotation Tools - Brushes and eraser tools for direct annotation</li> <li>Automatic Annotation - Algorithms for automated detection of bacterial colonies</li> <li>Canvas - The main viewing and interaction area</li> </ol>"},{"location":"user-guide/#basic-workflow","title":"Basic Workflow","text":"<p>A typical workflow using BactoVision follows these steps:</p> <ol> <li>Load an image - Create a BactoWidget with your bacterial growth image</li> <li>Adjust the grid - Set up the grid to match your experimental design</li> <li>Preprocess the image - Enhance contrast and other properties if needed</li> <li>Annotate - Use automatic methods and refine with manual tools</li> <li>Extract data - Get quantitative measurements from your annotations</li> </ol>"},{"location":"user-guide/#guides","title":"Guides","text":"<p>Detailed information about each aspect of BactoVision is available in the following guides:</p> <ul> <li>Basic Usage - Getting started with BactoVision</li> <li>Widget Interface - Overview of the user interface components</li> <li>Annotations - Methods for annotating bacterial colonies</li> <li>Grid System - Using the grid system for structured analysis</li> </ul>"},{"location":"user-guide/#need-help","title":"Need Help?","text":"<p>If you encounter any issues or have questions about using BactoVision, please open an issue on our GitHub repository.</p>"},{"location":"user-guide/annotations/","title":"Annotations","text":"<p>This guide covers the annotation capabilities in BactoVision, which allow you to mark bacterial colonies and growth areas within your images.</p>"},{"location":"user-guide/annotations/#annotation-methods","title":"Annotation Methods","text":"<p>BactoVision offers two complementary annotation approaches:</p> <ol> <li>Automatic annotation - Algorithm-based detection of bacterial colonies</li> <li>Manual annotation - Direct drawing tools for fine-grained control</li> </ol> <p>These approaches can be used individually or in combination to achieve the best results.</p>"},{"location":"user-guide/annotations/#automatic-annotation","title":"Automatic Annotation","text":"<p>The automatic annotation feature uses thresholding techniques to identify bacterial colonies in your images.</p>"},{"location":"user-guide/annotations/#how-it-works","title":"How It Works","text":"<p>The automatic annotation system works through the following steps:</p> <ol> <li>Applies Otsu thresholding with a customizable threshold multiplier</li> <li>Removes small objects below a specified size</li> <li>Clears border objects</li> <li>Creates convex hulls around the identified regions</li> </ol>"},{"location":"user-guide/annotations/#configuring-automatic-annotation","title":"Configuring Automatic Annotation","text":"<p>You can adjust two key parameters to optimize automatic detection:</p>"},{"location":"user-guide/annotations/#brightness-threshold","title":"Brightness Threshold","text":"<p>The \"Brightness threshold\" slider controls the sensitivity of detection:</p> <ul> <li>Higher values (&gt;1.0) - More restrictive detection, only selects very bright colonies</li> <li>Lower values (&lt;1.0) - More inclusive detection, may include background noise</li> </ul>"},{"location":"user-guide/annotations/#smallest-size","title":"Smallest Size","text":"<p>The \"Smallest size\" slider determines the minimum size of colonies to be detected:</p> <ul> <li>Higher values - Ignores smaller colonies</li> <li>Lower values - Includes smaller colonies, but may include noise</li> </ul>"},{"location":"user-guide/annotations/#running-automatic-annotation","title":"Running Automatic Annotation","text":"<p>To apply automatic annotation:</p> <ol> <li>Adjust the threshold and size parameters</li> <li>Click the \"Apply auto\" button</li> </ol> <pre><code># Programmatic control\nwidget.threshold_slider.value = 1.2  # Set brightness threshold\nwidget.small_object_size.value = 0.8  # Set smallest object size\nwidget.apply_auto_annotation()  # Run automatic annotation\n</code></pre>"},{"location":"user-guide/annotations/#manual-annotation","title":"Manual Annotation","text":"<p>Manual annotation allows you to directly draw or erase annotations for precise control.</p>"},{"location":"user-guide/annotations/#annotation-modes","title":"Annotation Modes","text":"<p>The manual annotation system offers three modes:</p> <ul> <li>Off - Disables manual annotation</li> <li>Add - Enables drawing annotations</li> <li>Erase - Enables erasing annotations</li> </ul>"},{"location":"user-guide/annotations/#brush-controls","title":"Brush Controls","text":"<p>The brush size can be adjusted using the slider:</p> <ul> <li>Larger brush sizes are useful for covering large areas quickly</li> <li>Smaller brush sizes provide fine-grained control for detailed work</li> </ul>"},{"location":"user-guide/annotations/#using-manual-annotation","title":"Using Manual Annotation","text":"<p>To manually annotate:</p> <ol> <li>Select either \"Add\" or \"Erase\" mode</li> <li>Adjust the brush size as needed</li> <li>Click and drag on the canvas to draw or erase</li> </ol> <pre><code># Programmatic control\nwidget.draw_mode_btns.value = 'Add'  # Set to drawing mode\nwidget.brush_size_slider.value = 5   # Set brush size\n</code></pre>"},{"location":"user-guide/annotations/#combined-approach","title":"Combined Approach","text":"<p>For best results, consider using a combined approach:</p> <ol> <li>Start with automatic annotation to quickly identify most colonies</li> <li>Switch to manual annotation to:</li> <li>Add missed colonies</li> <li>Remove false positives</li> <li>Refine boundaries</li> </ol>"},{"location":"user-guide/annotations/#viewing-and-hiding-annotations","title":"Viewing and Hiding Annotations","text":"<p>You can toggle the visibility of annotations using the \"Hide annotation\" button. This is useful when you want to check the original image without annotations.</p> <pre><code># Hide annotations\nwidget.hide_annotation_btn.value = True\n\n# Show annotations\nwidget.hide_annotation_btn.value = False\n</code></pre>"},{"location":"user-guide/annotations/#extracting-annotation-data","title":"Extracting Annotation Data","text":"<p>After annotation, you can extract the annotation mask:</p> <pre><code># Get binary mask of annotations\nmask = widget.mask\n\n# Analyze annotations per grid cell\nmetrics = widget.get_metrics()\n</code></pre>"},{"location":"user-guide/annotations/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"user-guide/annotations/#fine-tuning-image-before-annotation","title":"Fine-Tuning Image Before Annotation","text":"<p>For better annotation results, consider adjusting the image preprocessing:</p> <ol> <li>Enable CLAHE to enhance contrast</li> <li>Use background subtraction to remove uneven illumination</li> <li>Experiment with different colormaps for better visibility</li> </ol> <pre><code># Enhance image for better annotation\nwidget.clahe_btn.value = True\nwidget.clahe_limit_slider.value = 200\nwidget.subtract_background_btn.value = True\nwidget.cmap_down.value = 'viridis'\n</code></pre>"},{"location":"user-guide/annotations/#handling-difficult-cases","title":"Handling Difficult Cases","text":"<p>For images with uneven backgrounds or complex growth patterns:</p> <ol> <li>Start with a more permissive automatic threshold</li> <li>Manually erase false positives</li> <li>Add missed colonies by hand</li> <li>Consider adjusting the grid to exclude problematic areas</li> </ol>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental operations for using BactoVision to analyze bacterial growth images.</p>"},{"location":"user-guide/basic-usage/#getting-started","title":"Getting Started","text":"<p>To begin using BactoVision, you need to import the main widget class and create an instance with your image:</p> <pre><code>from bactovision.widget import BactoWidget\n\n# Create a widget with an image\nwidget = BactoWidget('path/to/your/image.png')\n\n# Display the widget\nwidget\n</code></pre>"},{"location":"user-guide/basic-usage/#loading-images","title":"Loading Images","text":"<p>BactoVision supports various ways to load images:</p> <pre><code># From a file path\nwidget = BactoWidget('path/to/image.png')\n\n# From a NumPy array\nimport numpy as np\nfrom PIL import Image\n\nimg = np.array(Image.open('path/to/image.png'))\nwidget = BactoWidget(img)\n</code></pre>"},{"location":"user-guide/basic-usage/#basic-annotation-workflow","title":"Basic Annotation Workflow","text":"<p>Once your image is loaded, a typical analysis workflow includes:</p>"},{"location":"user-guide/basic-usage/#1-adjusting-the-grid","title":"1. Adjusting the Grid","text":"<p>Set up the grid to match your experimental layout:</p> <pre><code># Access and modify grid properties\nwidget.canvas_widget.grid_num_x = 10  # Number of horizontal grid cells\nwidget.canvas_widget.grid_num_y = 8   # Number of vertical grid cells\n</code></pre> <p>You can also use the grid controls in the UI to adjust the grid layout interactively.</p>"},{"location":"user-guide/basic-usage/#2-preprocessing-the-image","title":"2. Preprocessing the Image","text":"<p>Enhance image quality for better annotation:</p> <pre><code># You can toggle preprocessing options through the UI\n# Or programmatically:\nwidget.clahe_btn.value = True  # Enable CLAHE enhancement\nwidget.clahe_limit_slider.value = 150  # Set CLAHE limit\nwidget.subtract_background_btn.value = True  # Enable background subtraction\n</code></pre>"},{"location":"user-guide/basic-usage/#3-annotation","title":"3. Annotation","text":"<p>BactoVision provides automatic and manual annotation methods:</p>"},{"location":"user-guide/basic-usage/#automatic-annotation","title":"Automatic Annotation","text":"<pre><code># Configure auto-annotation parameters\nwidget.threshold_slider.value = 1.2  # Adjust brightness threshold\nwidget.small_object_size.value = 0.8  # Set minimum object size\n\n# Run auto-annotation\nwidget.apply_auto_annotation()\n</code></pre> <p>You can also use the \"Apply auto\" button in the UI.</p>"},{"location":"user-guide/basic-usage/#manual-annotation","title":"Manual Annotation","text":"<p>For manual annotation, use the UI controls:</p> <ol> <li>Select annotation mode: \"Add\" or \"Erase\"</li> <li>Adjust brush size using the slider</li> <li>Draw or erase on the image by clicking and dragging</li> </ol>"},{"location":"user-guide/basic-usage/#4-extracting-data","title":"4. Extracting Data","text":"<p>After annotation, you can extract metrics:</p> <pre><code># Get summary metrics from the annotated image\nmetrics = widget.get_metrics()\n\n# Available metrics include:\n# - average_opacity: Average opacity within each grid cell\n# - integral_opacity: Total opacity within each grid cell\n# - relative_area: Proportion of each grid cell that is annotated\n# - num_pixels: Number of annotated pixels in each grid cell\n\nimport matplotlib.pyplot as plt\n\n# Visualize metrics\nplt.figure(figsize=(10, 6))\nplt.imshow(metrics['integral_opacity'])\nplt.colorbar()\nplt.title('Integral Opacity by Grid Cell')\nplt.show()\n</code></pre>"},{"location":"user-guide/basic-usage/#saving-results","title":"Saving Results","text":"<p>While BactoVision does not directly save results, you can extract and save the annotation data:</p> <pre><code># Get the annotation mask\nmask = widget.mask\n\n# Save the mask\nfrom PIL import Image\nImage.fromarray((mask * 255).astype('uint8')).save('annotation.png')\n\n# Save metrics to CSV\nimport pandas as pd\nimport numpy as np\n\nmetrics = widget.get_metrics()\ndf = pd.DataFrame({\n    'integral_opacity': metrics['integral_opacity'].flatten(),\n    'average_opacity': metrics['average_opacity'].flatten(),\n    'relative_area': metrics['relative_area'].flatten(),\n})\ndf.to_csv('metrics.csv')\n</code></pre>"},{"location":"user-guide/basic-usage/#next-steps","title":"Next Steps","text":"<p>For more detailed information about specific features, explore the other guides:</p> <ul> <li>Widget Interface for UI details</li> <li>Annotations for advanced annotation techniques</li> <li>Grid System for detailed grid configuration</li> </ul>"},{"location":"user-guide/grid/","title":"Grid System","text":"<p>BactoVision's grid system is a powerful feature that allows you to analyze bacterial growth in a structured, quantitative manner across different regions of your image.</p>"},{"location":"user-guide/grid/#overview","title":"Overview","text":"<p>The grid system divides your image into a customizable array of cells, enabling:</p> <ul> <li>Systematic comparison of bacterial growth across different regions</li> <li>Quantitative analysis of growth density in each grid cell</li> <li>Structured data extraction for statistical analysis</li> </ul>"},{"location":"user-guide/grid/#basic-grid-concepts","title":"Basic Grid Concepts","text":"<p>A grid in BactoVision consists of:</p> <ul> <li>A configurable number of horizontal (X) and vertical (Y) divisions</li> <li>Adjustable padding around the edges</li> <li>Automatic calculation of metrics for each grid cell</li> </ul>"},{"location":"user-guide/grid/#configuring-the-grid","title":"Configuring the Grid","text":""},{"location":"user-guide/grid/#using-the-ui-controls","title":"Using the UI Controls","text":"<p>The grid can be configured using the controls in the Grid Controls section:</p> <ol> <li>Horizontal Grid Size - Sets the number of columns</li> <li>Vertical Grid Size - Sets the number of rows</li> <li>Adjust Grid toggle - Enables grid adjustment mode</li> <li>Hide Grid toggle - Shows or hides the grid overlay</li> </ol>"},{"location":"user-guide/grid/#adjusting-grid-padding","title":"Adjusting Grid Padding","text":"<p>When \"Adjust Grid\" is enabled, you can modify the padding around the grid edges:</p> <ol> <li>Enable \"Adjust Grid\" by clicking the toggle button</li> <li>Use the padding sliders that appear:</li> <li>Top Padding</li> <li>Bottom Padding</li> <li>Left Padding</li> <li>Right Padding</li> </ol> <p>This allows you to exclude non-relevant areas from analysis, such as the edges of a petri dish.</p>"},{"location":"user-guide/grid/#programmatic-control","title":"Programmatic Control","text":"<p>You can also configure the grid programmatically:</p> <pre><code># Set grid dimensions\nwidget.canvas_widget.grid_num_x = 12  # 12 columns\nwidget.canvas_widget.grid_num_y = 8   # 8 rows\n\n# Configure padding\nwidget.canvas_widget.pad_top = 50     # Top padding in pixels\nwidget.canvas_widget.pad_bottom = 60  # Bottom padding in pixels\nwidget.canvas_widget.pad_left = 90    # Left padding in pixels\nwidget.canvas_widget.pad_right = 50   # Right padding in pixels\n\n# Show/hide grid\nwidget.hide_grid_btn.value = False    # Show grid\n\n# Enable/disable adjustment mode\nwidget.change_grid_btn.value = True   # Enable adjustment mode\n</code></pre>"},{"location":"user-guide/grid/#getting-grid-information","title":"Getting Grid Information","text":"<p>You can retrieve the current grid configuration:</p> <pre><code>grid_info = widget.canvas_widget.get_grid_dict()\nprint(f\"Grid size: {grid_info['num_x']} \u00d7 {grid_info['num_y']}\")\nprint(f\"Padding - Top: {grid_info['pad_top']}, Bottom: {grid_info['pad_bottom']}\")\nprint(f\"Padding - Left: {grid_info['pad_left']}, Right: {grid_info['pad_right']}\")\n</code></pre>"},{"location":"user-guide/grid/#grid-based-analysis","title":"Grid-Based Analysis","text":"<p>Once your grid is configured, BactoVision can calculate various metrics for each grid cell:</p>"},{"location":"user-guide/grid/#available-metrics","title":"Available Metrics","text":"<p>After annotating your image, you can get metrics for each grid cell using:</p> <pre><code>metrics = widget.get_metrics()\n</code></pre> <p>This returns a dictionary with the following metrics:</p> <ul> <li>integral_opacity - Total opacity within each grid cell</li> <li>average_opacity - Average opacity per pixel in each grid cell</li> <li>relative_area - Proportion of each grid cell that is annotated</li> <li>num_pixels - Count of annotated pixels in each grid cell</li> </ul> <p>Each metric is returned as a 2D NumPy array matching the grid dimensions.</p>"},{"location":"user-guide/grid/#visualizing-grid-metrics","title":"Visualizing Grid Metrics","text":"<p>You can visualize these metrics using matplotlib:</p> <pre><code>import matplotlib.pyplot as plt\n\n# Get metrics\nmetrics = widget.get_metrics()\n\n# Visualize integral opacity\nplt.figure(figsize=(10, 8))\nplt.imshow(metrics['integral_opacity'])\nplt.colorbar()\nplt.title('Integral Opacity by Grid Cell')\nplt.show()\n</code></pre>"},{"location":"user-guide/grid/#exporting-grid-data","title":"Exporting Grid Data","text":"<p>You can export grid data for further analysis:</p> <pre><code>import pandas as pd\nimport numpy as np\n\nmetrics = widget.get_metrics()\ngrid_y, grid_x = metrics['integral_opacity'].shape\n\n# Create a DataFrame\ndata = {\n    'position': [],\n    'grid_x': [],\n    'grid_y': [],\n    'integral_opacity': [],\n    'average_opacity': [],\n    'relative_area': [],\n    'num_pixels': []\n}\n\nfor y in range(grid_y):\n    for x in range(grid_x):\n        position = y * grid_x + x\n        data['position'].append(position)\n        data['grid_x'].append(x)\n        data['grid_y'].append(y)\n        data['integral_opacity'].append(metrics['integral_opacity'][y, x])\n        data['average_opacity'].append(metrics['average_opacity'][y, x])\n        data['relative_area'].append(metrics['relative_area'][y, x])\n        data['num_pixels'].append(metrics['num_pixels'][y, x])\n\ndf = pd.DataFrame(data)\ndf.to_csv('grid_analysis.csv', index=False)\n</code></pre>"},{"location":"user-guide/grid/#grid-based-experimental-design","title":"Grid-Based Experimental Design","text":"<p>The grid system is particularly useful for analyzing experimental designs such as:</p>"},{"location":"user-guide/grid/#gradient-studies","title":"Gradient Studies","text":"<p>When studying growth across environmental gradients (e.g., temperature, nutrient, light):</p> <ol> <li>Set up your grid to match the gradient direction</li> <li>Use a higher number of grid cells along the gradient axis</li> <li>Extract metrics to quantify how growth changes along the gradient</li> </ol>"},{"location":"user-guide/grid/#well-plate-mapping","title":"Well Plate Mapping","text":"<p>For multi-well experiments:</p> <ol> <li>Configure the grid to match your well plate layout</li> <li>Adjust the padding to account for the spaces between wells</li> <li>Extract metrics for each grid cell corresponding to a well</li> </ol>"},{"location":"user-guide/grid/#comparison-studies","title":"Comparison Studies","text":"<p>When comparing different strains or conditions:</p> <ol> <li>Set up a grid that separates different experimental conditions</li> <li>Extract metrics for each condition</li> <li>Export the data for statistical comparison</li> </ol>"},{"location":"user-guide/grid/#tips-for-effective-grid-use","title":"Tips for Effective Grid Use","text":"<ul> <li>Match your experimental design: Configure your grid to reflect the underlying structure of your experiment</li> <li>Consistent grid setup: Use the same grid configuration for comparable experiments to maintain consistency</li> <li>Adjust padding carefully: Use padding to exclude areas that aren't relevant to your analysis</li> <li>Consider exporting raw data: While visualizations are helpful, exporting raw data allows for more sophisticated statistical analysis </li> </ul>"},{"location":"user-guide/widget-interface/","title":"Widget Interface","text":"<p>This guide provides a detailed overview of the BactoVision user interface components and their functions.</p>"},{"location":"user-guide/widget-interface/#interface-overview","title":"Interface Overview","text":"<p>The BactoVision widget is organized into several functional sections:</p> <p></p> <p>The interface consists of:</p> <ol> <li>Control Panel - Contains all the adjustment controls</li> <li>Canvas - The main display and interaction area</li> </ol>"},{"location":"user-guide/widget-interface/#control-panel","title":"Control Panel","text":"<p>The Control Panel is divided into two main columns:</p>"},{"location":"user-guide/widget-interface/#preprocessing-column","title":"Preprocessing Column","text":""},{"location":"user-guide/widget-interface/#grid-controls","title":"Grid Controls","text":"<ul> <li>Adjust Grid toggle - Enables grid adjustment mode</li> <li>Hide Grid toggle - Shows/hides the grid overlay</li> <li>Horizontal/Vertical Grid Size sliders - Control the number of grid cells</li> <li>Padding Sliders (accessible when \"Adjust Grid\" is on) - Control the margins around the grid</li> </ul>"},{"location":"user-guide/widget-interface/#image-enhancement-controls","title":"Image Enhancement Controls","text":"<ul> <li>Apply CLAHE toggle - Enables Contrast Limited Adaptive Histogram Equalization</li> <li>CLAHE Limit slider - Controls the contrast enhancement strength</li> <li>Subtract Background toggle - Removes estimated background intensity</li> <li>Colormap dropdown - Changes the color scheme for visualizing the image</li> </ul>"},{"location":"user-guide/widget-interface/#annotation-column","title":"Annotation Column","text":""},{"location":"user-guide/widget-interface/#manual-annotation-controls","title":"Manual Annotation Controls","text":"<ul> <li>Manual Annotation toggle buttons - Switch between modes:</li> <li>Off - Disables manual annotation</li> <li>Add - Enables drawing annotations</li> <li>Erase - Enables erasing annotations</li> <li>Brush Size slider - Controls the size of the annotation brush</li> </ul>"},{"location":"user-guide/widget-interface/#automatic-annotation-controls","title":"Automatic Annotation Controls","text":"<ul> <li>Apply Auto button - Runs automatic annotation</li> <li>Hide Annotation toggle - Shows/hides annotations</li> <li>Brightness Threshold slider - Controls the threshold for automatic detection</li> <li>Smallest Size slider - Sets the minimum size for detected objects</li> </ul>"},{"location":"user-guide/widget-interface/#canvas","title":"Canvas","text":"<p>The canvas is the main area where:</p> <ul> <li>The bacterial growth image is displayed</li> <li>Grid lines are shown (when not hidden)</li> <li>Manual annotations can be drawn (when in Add or Erase mode)</li> <li>Results of automatic annotation are displayed</li> </ul>"},{"location":"user-guide/widget-interface/#canvas-interactions","title":"Canvas Interactions","text":"<ul> <li>Left-click and drag - Draw or erase annotations (depending on the selected mode)</li> <li>Mouse wheel - Zoom in/out (if supported by your Jupyter environment)</li> <li>Click and drag grid lines - Adjust grid positions (when \"Adjust Grid\" is enabled)</li> </ul>"},{"location":"user-guide/widget-interface/#programmatic-control","title":"Programmatic Control","text":"<p>All interface elements can also be controlled programmatically:</p> <pre><code># Grid controls\nwidget.change_grid_btn.value = True  # Enable grid adjustment\nwidget.hide_grid_btn.value = False  # Show grid\nwidget.x_grid_size_slider.value = 10  # Set horizontal grid size\nwidget.y_grid_size_slider.value = 8  # Set vertical grid size\n\n# Image enhancement\nwidget.clahe_btn.value = True  # Enable CLAHE\nwidget.clahe_limit_slider.value = 150  # Set CLAHE limit\nwidget.subtract_background_btn.value = True  # Enable background subtraction\nwidget.cmap_down.value = 'viridis'  # Change colormap\n\n# Manual annotation\nwidget.draw_mode_btns.value = 'Add'  # Set annotation mode\nwidget.brush_size_slider.value = 5  # Set brush size\n\n# Automatic annotation\nwidget.threshold_slider.value = 1.2  # Set brightness threshold\nwidget.small_object_size.value = 0.8  # Set minimum object size\nwidget.hide_annotation_btn.value = False  # Show annotations\n</code></pre>"},{"location":"user-guide/widget-interface/#accessing-canvas-data","title":"Accessing Canvas Data","text":"<p>You can access the raw data from the canvas:</p> <pre><code># Get current annotation mask\nmask = widget.mask\n\n# Get grid dimensions\ngrid_info = widget.canvas_widget.get_grid_dict()\nprint(f\"Grid: {grid_info['num_x']} x {grid_info['num_y']}\")\n\n# Get processed image\nprocessed_img = widget._preprocessed_img\n</code></pre>"},{"location":"user-guide/widget-interface/#additional-views","title":"Additional Views","text":"<p>BactoVision does not provide multiple views of the same data. However, you can create separate visualizations using the extracted data:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Visualize the mask\nplt.figure(figsize=(8, 6))\nplt.imshow(widget.mask, cmap='gray')\nplt.title('Annotation Mask')\nplt.colorbar()\nplt.show()\n\n# Visualize metrics\nmetrics = widget.get_metrics()\nplt.figure(figsize=(8, 6))\nplt.imshow(metrics['integral_opacity'])\nplt.title('Integral Opacity')\nplt.colorbar()\nplt.show()\n</code></pre>"}]}