{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BactoVision","text":""},{"location":"#a-jupyter-widget-for-annotating-and-visualizing-bacterial-growth-data","title":"A Jupyter widget for annotating and visualizing bacterial growth data","text":"<p>BactoVision provides an interactive widget for Jupyter notebook designed for fast semi-automated annotation of bacterial growth images. It combines intuitive manual drawing tools with automatic detection algorithms to make the annotation process efficient and accurate.</p> <p>BactoVision is used in the paper:</p> <p>Tyrosine auxotrophy shapes Staphylococcus aureus nasal colonization and interactions with commensal communities L. Camus et al. 2025 (submitted)</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Jupyter integration - Annotate data directly in Jupyter notebook to enable flexiblility and integration with other methods</li> <li>Interactive annotation - Combine automatic and manual annotation methods</li> <li>Grid system - Analyze data in a structured grid format</li> <li>Image enhancement - Apply CLAHE and other image processing techniques</li> <li>Quantitative analysis - Extract metrics on bacterial growth</li> <li>Intuitive interface - Simple and user-friendly design</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from bactovision import BactoWidget\n\n# Create a widget with an image\nwidget = BactoWidget('path/to/image.png')\n\n# Display the widget\nwidget\n</code></pre> <p>To get the mask and the metrics after the annotation is completed, run:</p> <pre><code>annotation_mask = widget.get_annotation_mask()\nmetrics = widget.get_metrics()\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>If you use BactoVision in your research, please cite:</p> <pre><code>Camus L. et al. (2025). Tyrosine auxotrophy shapes Staphylococcus aureus nasal colonization\nand interactions with commensal communities. [Journal pending].\n</code></pre>"},{"location":"installation/","title":"Installation Guide","text":"<p>BactoVision is designed to work within Jupyter notebooks and can be installed via pip. The package is compatible with Python 3.7+ and includes all necessary dependencies.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing BactoVision, ensure you have Python 3.7 or higher.</p>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#standard-installation","title":"Standard Installation","text":"<p>The easiest way to install BactoVision is using pip:</p> <pre><code>pip install bactovision\n</code></pre> <p>This will install BactoVision along with all its dependencies.</p>"},{"location":"installation/#installation-from-source","title":"Installation from Source","text":"<p>For the latest development version or to contribute to the project, you can install from source:</p> <pre><code>git clone https://github.com/mlcolab/bactovision.git\ncd bactovision\npip install .\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>BactoVision has the following dependencies, which will be automatically installed with pip:</p> <ul> <li>numpy</li> <li>scipy</li> <li>scikit-image</li> <li>Pillow</li> <li>opencv-python</li> <li>anywidget</li> <li>traitlets</li> <li>matplotlib</li> <li>jupyterlab</li> </ul>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that BactoVision is installed correctly, open a Jupyter notebook and run:</p> <pre><code>from bactovision.widget import BactoWidget\nprint(BactoWidget)\n</code></pre> <p>If the installation was successful, this should print the widget class information without any errors.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#missing-dependencies","title":"Missing Dependencies","text":"<p>If you encounter errors about missing dependencies, try reinstalling with:</p> <pre><code>pip install bactovision --force-reinstall\n</code></pre>"},{"location":"installation/#jupyterlab-extension-issues","title":"JupyterLab Extension Issues","text":"<p>For JupyterLab users, if the widget doesn't display properly, ensure that the widget extension is installed:</p> <pre><code>jupyter labextension list\n</code></pre> <p>The output should include <code>anywidget</code> or similar entries. If not, you may need to run:</p> <pre><code>jupyter labextension install @jupyter-widgets/jupyterlab-manager\n</code></pre>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you experience any issues with installation, please open an issue on our GitHub repository with details about the problem and your environment.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This section provides comprehensive documentation on how to use BactoVision for annotating and analyzing bacterial growth images.</p>"},{"location":"user-guide/#overview","title":"Overview","text":"<p>BactoVision is designed with a focus on usability and flexibility. It provides both automatic and manual annotation capabilities, allowing researchers to quickly process large numbers of images while maintaining the ability to make fine-grained adjustments when needed.</p> <p>The widget interface is divided into several functional areas:</p> <ol> <li>Preprocessing Controls - Tools for enhancing image quality before annotation</li> <li>Grid Controls - Options for configuring the analysis grid</li> <li>Manual Annotation Tools - Brushes and eraser tools for direct annotation</li> <li>Automatic Annotation - Algorithms for automated detection of bacterial colonies</li> <li>Canvas - The main viewing and interaction area</li> </ol>"},{"location":"user-guide/#basic-workflow","title":"Basic Workflow","text":"<p>A typical workflow using BactoVision follows these steps:</p> <ol> <li>Load an image - Create a BactoWidget with your bacterial growth image</li> <li>Adjust the grid - Set up the grid to match your experimental design</li> <li>Preprocess the image - Enhance contrast and other properties if needed</li> <li>Annotate - Use automatic methods and refine with manual tools</li> <li>Extract data - Get quantitative measurements from your annotations</li> </ol>"},{"location":"user-guide/#guides","title":"Guides","text":"<p>Detailed information about each aspect of BactoVision is available in the following guides:</p> <ul> <li>Basic Usage - Getting started with BactoVision</li> <li>Widget Interface - Overview of the user interface components</li> <li>Annotations - Methods for annotating bacterial colonies</li> <li>Grid System - Using the grid system for structured analysis</li> </ul>"},{"location":"user-guide/#need-help","title":"Need Help?","text":"<p>If you encounter any issues or have questions about using BactoVision, please open an issue on our GitHub repository.</p>"},{"location":"user-guide/annotations/","title":"Annotations","text":"<p>This guide covers the annotation capabilities in BactoVision, which allow you to mark bacterial colonies and growth areas within your images.</p>"},{"location":"user-guide/annotations/#annotation-methods","title":"Annotation Methods","text":"<p>BactoVision offers two complementary annotation approaches:</p> <ol> <li>Automatic annotation - Algorithm-based detection of bacterial colonies</li> <li>Manual annotation - Direct drawing tools for fine-grained control</li> </ol> <p>These approaches can be used individually or in combination to achieve the best results.</p>"},{"location":"user-guide/annotations/#automatic-annotation","title":"Automatic Annotation","text":"<p>The automatic annotation feature uses thresholding techniques to identify bacterial colonies in your images.</p>"},{"location":"user-guide/annotations/#how-it-works","title":"How It Works","text":"<p>The automatic annotation system works through the following steps:</p> <ol> <li>Applies Otsu thresholding with a customizable threshold multiplier</li> <li>Removes small objects below a specified size</li> <li>Clears border objects</li> <li>Creates convex hulls around the identified regions</li> </ol>"},{"location":"user-guide/annotations/#configuring-automatic-annotation","title":"Configuring Automatic Annotation","text":"<p>You can adjust two key parameters to optimize automatic detection:</p>"},{"location":"user-guide/annotations/#brightness-threshold","title":"Brightness Threshold","text":"<p>The \"Brightness threshold\" slider controls the sensitivity of detection:</p> <ul> <li>Higher values (&gt;1.0) - More restrictive detection, only selects very bright colonies</li> <li>Lower values (&lt;1.0) - More inclusive detection, may include background noise</li> </ul>"},{"location":"user-guide/annotations/#smallest-size","title":"Smallest Size","text":"<p>The \"Smallest size\" slider determines the minimum size of colonies to be detected:</p> <ul> <li>Higher values - Ignores smaller colonies</li> <li>Lower values - Includes smaller colonies, but may include noise</li> </ul>"},{"location":"user-guide/annotations/#running-automatic-annotation","title":"Running Automatic Annotation","text":"<p>To apply automatic annotation:</p> <ol> <li>Adjust the threshold and size parameters</li> <li>Click the \"Apply auto\" button</li> </ol> <pre><code># Programmatic control\nwidget.threshold_slider.value = 1.2  # Set brightness threshold\nwidget.small_object_size.value = 0.8  # Set smallest object size\nwidget.apply_auto_annotation()  # Run automatic annotation\n</code></pre>"},{"location":"user-guide/annotations/#manual-annotation","title":"Manual Annotation","text":"<p>Manual annotation allows you to directly draw or erase annotations for precise control.</p>"},{"location":"user-guide/annotations/#annotation-modes","title":"Annotation Modes","text":"<p>The manual annotation system offers three modes:</p> <ul> <li>Off - Disables manual annotation</li> <li>Add - Enables drawing annotations</li> <li>Erase - Enables erasing annotations</li> </ul>"},{"location":"user-guide/annotations/#brush-controls","title":"Brush Controls","text":"<p>The brush size can be adjusted using the slider:</p> <ul> <li>Larger brush sizes are useful for covering large areas quickly</li> <li>Smaller brush sizes provide fine-grained control for detailed work</li> </ul>"},{"location":"user-guide/annotations/#using-manual-annotation","title":"Using Manual Annotation","text":"<p>To manually annotate:</p> <ol> <li>Select either \"Add\" or \"Erase\" mode</li> <li>Adjust the brush size as needed</li> <li>Click and drag on the canvas to draw or erase</li> </ol> <pre><code># Programmatic control\nwidget.draw_mode_btns.value = 'Add'  # Set to drawing mode\nwidget.brush_size_slider.value = 5   # Set brush size\n</code></pre>"},{"location":"user-guide/annotations/#combined-approach","title":"Combined Approach","text":"<p>For best results, consider using a combined approach:</p> <ol> <li>Start with automatic annotation to quickly identify most colonies</li> <li>Switch to manual annotation to:</li> <li>Add missed colonies</li> <li>Remove false positives</li> <li>Refine boundaries</li> </ol>"},{"location":"user-guide/annotations/#viewing-and-hiding-annotations","title":"Viewing and Hiding Annotations","text":"<p>You can toggle the visibility of annotations using the \"Hide annotation\" button. This is useful when you want to check the original image without annotations.</p> <pre><code># Hide annotations\nwidget.hide_annotation_btn.value = True\n\n# Show annotations\nwidget.hide_annotation_btn.value = False\n</code></pre>"},{"location":"user-guide/annotations/#extracting-annotation-data","title":"Extracting Annotation Data","text":"<p>After annotation, you can extract the annotation mask:</p> <pre><code># Get binary mask of annotations\nmask = widget.mask\n\n# Analyze annotations per grid cell\nmetrics = widget.get_metrics()\n</code></pre>"},{"location":"user-guide/annotations/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"user-guide/annotations/#fine-tuning-image-before-annotation","title":"Fine-Tuning Image Before Annotation","text":"<p>For better annotation results, consider adjusting the image preprocessing:</p> <ol> <li>Enable CLAHE to enhance contrast</li> <li>Use background subtraction to remove uneven illumination</li> <li>Experiment with different colormaps for better visibility</li> </ol> <pre><code># Enhance image for better annotation\nwidget.clahe_btn.value = True\nwidget.clahe_limit_slider.value = 200\nwidget.subtract_background_btn.value = True\nwidget.cmap_down.value = 'viridis'\n</code></pre>"},{"location":"user-guide/annotations/#handling-difficult-cases","title":"Handling Difficult Cases","text":"<p>For images with uneven backgrounds or complex growth patterns:</p> <ol> <li>Start with a more permissive automatic threshold</li> <li>Manually erase false positives</li> <li>Add missed colonies by hand</li> <li>Consider adjusting the grid to exclude problematic areas</li> </ol>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental operations for using BactoVision to analyze bacterial growth images.</p>"},{"location":"user-guide/basic-usage/#getting-started","title":"Getting Started","text":"<p>To begin using BactoVision, you need to import the main widget class and create an instance with your image:</p> <pre><code>from bactovision.widget import BactoWidget\n\n# Create a widget with an image\nwidget = BactoWidget('path/to/your/image.png')\n\n# Display the widget\nwidget\n</code></pre>"},{"location":"user-guide/basic-usage/#loading-images","title":"Loading Images","text":"<p>BactoVision supports various ways to load images:</p> <pre><code># From a file path\nwidget = BactoWidget('path/to/image.png')\n\n# From a NumPy array\nimport numpy as np\nfrom PIL import Image\n\nimg = np.array(Image.open('path/to/image.png'))\nwidget = BactoWidget(img)\n</code></pre>"},{"location":"user-guide/basic-usage/#basic-annotation-workflow","title":"Basic Annotation Workflow","text":"<p>Once your image is loaded, a typical analysis workflow includes:</p>"},{"location":"user-guide/basic-usage/#1-adjusting-the-grid","title":"1. Adjusting the Grid","text":"<p>Set up the grid to match your experimental layout:</p> <pre><code># Access and modify grid properties\nwidget.canvas_widget.grid_num_x = 10  # Number of horizontal grid cells\nwidget.canvas_widget.grid_num_y = 8   # Number of vertical grid cells\n</code></pre> <p>You can also use the grid controls in the UI to adjust the grid layout interactively.</p>"},{"location":"user-guide/basic-usage/#2-preprocessing-the-image","title":"2. Preprocessing the Image","text":"<p>Enhance image quality for better annotation:</p> <pre><code># You can toggle preprocessing options through the UI\n# Or programmatically:\nwidget.clahe_btn.value = True  # Enable CLAHE enhancement\nwidget.clahe_limit_slider.value = 150  # Set CLAHE limit\nwidget.subtract_background_btn.value = True  # Enable background subtraction\n</code></pre>"},{"location":"user-guide/basic-usage/#3-annotation","title":"3. Annotation","text":"<p>BactoVision provides automatic and manual annotation methods:</p>"},{"location":"user-guide/basic-usage/#automatic-annotation","title":"Automatic Annotation","text":"<pre><code># Configure auto-annotation parameters\nwidget.threshold_slider.value = 1.2  # Adjust brightness threshold\nwidget.small_object_size.value = 0.8  # Set minimum object size\n\n# Run auto-annotation\nwidget.apply_auto_annotation()\n</code></pre> <p>You can also use the \"Apply auto\" button in the UI.</p>"},{"location":"user-guide/basic-usage/#manual-annotation","title":"Manual Annotation","text":"<p>For manual annotation, use the UI controls:</p> <ol> <li>Select annotation mode: \"Add\" or \"Erase\"</li> <li>Adjust brush size using the slider</li> <li>Draw or erase on the image by clicking and dragging</li> </ol>"},{"location":"user-guide/basic-usage/#4-extracting-data","title":"4. Extracting Data","text":"<p>After annotation, you can extract metrics:</p> <pre><code># Get summary metrics from the annotated image\nmetrics = widget.get_metrics()\n\n# Available metrics include:\n# - average_opacity: Average opacity within each grid cell\n# - integral_opacity: Total opacity within each grid cell\n# - relative_area: Proportion of each grid cell that is annotated\n# - num_pixels: Number of annotated pixels in each grid cell\n\nimport matplotlib.pyplot as plt\n\n# Visualize metrics\nplt.figure(figsize=(10, 6))\nplt.imshow(metrics['integral_opacity'])\nplt.colorbar()\nplt.title('Integral Opacity by Grid Cell')\nplt.show()\n</code></pre>"},{"location":"user-guide/basic-usage/#saving-results","title":"Saving Results","text":"<p>While BactoVision does not directly save results, you can extract and save the annotation data:</p> <pre><code># Get the annotation mask\nmask = widget.mask\n\n# Save the mask\nfrom PIL import Image\nImage.fromarray((mask * 255).astype('uint8')).save('annotation.png')\n\n# Save metrics to CSV\nimport pandas as pd\nimport numpy as np\n\nmetrics = widget.get_metrics()\ndf = pd.DataFrame({\n    'integral_opacity': metrics['integral_opacity'].flatten(),\n    'average_opacity': metrics['average_opacity'].flatten(),\n    'relative_area': metrics['relative_area'].flatten(),\n})\ndf.to_csv('metrics.csv')\n</code></pre>"},{"location":"user-guide/basic-usage/#next-steps","title":"Next Steps","text":"<p>For more detailed information about specific features, explore the other guides:</p> <ul> <li>Widget Interface for UI details</li> <li>Annotations for advanced annotation techniques</li> <li>Grid System for detailed grid configuration</li> </ul>"},{"location":"user-guide/widget-interface/","title":"Widget Interface","text":"<p>This guide provides a detailed overview of the BactoVision user interface components and their functions.</p>"},{"location":"user-guide/widget-interface/#interface-overview","title":"Interface Overview","text":"<p>The BactoVision widget is organized into several functional sections:</p> <p></p> <p>The interface consists of:</p> <ol> <li>Control Panel - Contains all the adjustment controls</li> <li>Canvas - The main display and interaction area</li> </ol>"},{"location":"user-guide/widget-interface/#control-panel","title":"Control Panel","text":"<p>The Control Panel is divided into two main columns:</p>"},{"location":"user-guide/widget-interface/#preprocessing-column","title":"Preprocessing Column","text":""},{"location":"user-guide/widget-interface/#grid-controls","title":"Grid Controls","text":"<ul> <li>Adjust Grid toggle - Enables grid adjustment mode</li> <li>Hide Grid toggle - Shows/hides the grid overlay</li> <li>Horizontal/Vertical Grid Size sliders - Control the number of grid cells</li> <li>Padding Sliders (accessible when \"Adjust Grid\" is on) - Control the margins around the grid</li> </ul>"},{"location":"user-guide/widget-interface/#image-enhancement-controls","title":"Image Enhancement Controls","text":"<ul> <li>Apply CLAHE toggle - Enables Contrast Limited Adaptive Histogram Equalization</li> <li>CLAHE Limit slider - Controls the contrast enhancement strength</li> <li>Subtract Background toggle - Removes estimated background intensity</li> <li>Colormap dropdown - Changes the color scheme for visualizing the image</li> </ul>"},{"location":"user-guide/widget-interface/#annotation-column","title":"Annotation Column","text":""},{"location":"user-guide/widget-interface/#manual-annotation-controls","title":"Manual Annotation Controls","text":"<ul> <li>Manual Annotation toggle buttons - Switch between modes:</li> <li>Off - Disables manual annotation</li> <li>Add - Enables drawing annotations</li> <li>Erase - Enables erasing annotations</li> <li>Brush Size slider - Controls the size of the annotation brush</li> </ul>"},{"location":"user-guide/widget-interface/#automatic-annotation-controls","title":"Automatic Annotation Controls","text":"<ul> <li>Apply Auto button - Runs automatic annotation</li> <li>Hide Annotation toggle - Shows/hides annotations</li> <li>Brightness Threshold slider - Controls the threshold for automatic detection</li> <li>Smallest Size slider - Sets the minimum size for detected objects</li> </ul>"},{"location":"user-guide/widget-interface/#canvas","title":"Canvas","text":"<p>The canvas is the main area where:</p> <ul> <li>The bacterial growth image is displayed</li> <li>Grid lines are shown (when not hidden)</li> <li>Manual annotations can be drawn (when in Add or Erase mode)</li> <li>Results of automatic annotation are displayed</li> </ul>"},{"location":"user-guide/widget-interface/#canvas-interactions","title":"Canvas Interactions","text":"<ul> <li>Left-click and drag - Draw or erase annotations (depending on the selected mode)</li> <li>Mouse wheel - Zoom in/out (if supported by your Jupyter environment)</li> <li>Click and drag grid lines - Adjust grid positions (when \"Adjust Grid\" is enabled)</li> </ul>"},{"location":"user-guide/widget-interface/#programmatic-control","title":"Programmatic Control","text":"<p>All interface elements can also be controlled programmatically:</p> <pre><code># Grid controls\nwidget.change_grid_btn.value = True  # Enable grid adjustment\nwidget.hide_grid_btn.value = False  # Show grid\nwidget.x_grid_size_slider.value = 10  # Set horizontal grid size\nwidget.y_grid_size_slider.value = 8  # Set vertical grid size\n\n# Image enhancement\nwidget.clahe_btn.value = True  # Enable CLAHE\nwidget.clahe_limit_slider.value = 150  # Set CLAHE limit\nwidget.subtract_background_btn.value = True  # Enable background subtraction\nwidget.cmap_down.value = 'viridis'  # Change colormap\n\n# Manual annotation\nwidget.draw_mode_btns.value = 'Add'  # Set annotation mode\nwidget.brush_size_slider.value = 5  # Set brush size\n\n# Automatic annotation\nwidget.threshold_slider.value = 1.2  # Set brightness threshold\nwidget.small_object_size.value = 0.8  # Set minimum object size\nwidget.hide_annotation_btn.value = False  # Show annotations\n</code></pre>"},{"location":"user-guide/widget-interface/#accessing-canvas-data","title":"Accessing Canvas Data","text":"<p>You can access the raw data from the canvas:</p> <pre><code># Get current annotation mask\nmask = widget.mask\n\n# Get grid dimensions\ngrid_info = widget.canvas_widget.get_grid_dict()\nprint(f\"Grid: {grid_info['num_x']} x {grid_info['num_y']}\")\n\n# Get processed image\nprocessed_img = widget._preprocessed_img\n</code></pre>"},{"location":"user-guide/widget-interface/#additional-views","title":"Additional Views","text":"<p>BactoVision does not provide multiple views of the same data. However, you can create separate visualizations using the extracted data:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Visualize the mask\nplt.figure(figsize=(8, 6))\nplt.imshow(widget.mask, cmap='gray')\nplt.title('Annotation Mask')\nplt.colorbar()\nplt.show()\n\n# Visualize metrics\nmetrics = widget.get_metrics()\nplt.figure(figsize=(8, 6))\nplt.imshow(metrics['integral_opacity'])\nplt.title('Integral Opacity')\nplt.colorbar()\nplt.show()\n</code></pre>"}]}